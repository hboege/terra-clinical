(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{1201:function(e,t){},1373:function(e){e.exports=JSON.parse('{"name":"terra-clinical-onset-picker","version":"4.9.0","description":"The terra-clinical-onset-picker component provides users a way to enter or select an approximate date for use in onset scenarios.","main":"lib/OnsetPicker.js","repository":{"type":"git","url":"git+https://github.com/cerner/terra-clinical.git"},"keywords":["Cerner","Terra","Clinical","Form","UI","terra-clinical-onset-picker","Date","onset"],"author":"Cerner Corporation","license":"Apache-2.0","bugs":{"url":"https://github.com/cerner/terra-clinical/issues"},"homepage":"https://github.com/cerner/terra-clinical#readme","peerDependencies":{"react":"^16.8.5","react-dom":"^16.8.5","react-intl":"^2.8.0"},"dependencies":{"classnames":"^2.2.5","mockdate":"^2.0.2","moment":"^2.22.2","prop-types":"^15.5.8","terra-breakpoints":"^2.0.0","terra-date-picker":"^4.0.0","terra-doc-template":"^2.0.0","terra-form-field":"^3.0.0","terra-form-fieldset":"^2.0.0","terra-form-input":"^2.0.0","terra-form-select":"^5.0.0"},"scripts":{"compile":"babel --root-mode upward src --out-dir lib --copy-files","lint":"npm run lint:js","lint:js":"eslint --ext .js,.jsx . --ignore-path ../../.eslintignore","precompile":"rm -rf lib","test":"npm run jest && npm run wdio","jest":"jest --config ../../jestconfig.js","wdio":"cd ../.. && npx wdio ./packages/$npm_package_name/wdio.conf.js"}}')},1925:function(e,t,n){"use strict";n.r(t),t.default="# Terra Clinical Onset Picker\n\nThe terra-clinical-onset-picker component provides users a way to enter or select an approximate date for use in onset scenarios. The onset date is limited to occurring after the birth date supplied. For `AGE` granularity, the age input has a maximum of `8` for `Week(s)` unit, and `24` for `Month(s)` unit. The user is expected to use `Month(s)` and `Year(s)` respectively for larger values.\n\n## Getting Started\n\n- Install with [npmjs](https://www.npmjs.com):\n  - `npm install terra-clinical-onset-picker`\n\n\n## Component Features\n* [Cross-Browser Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#cross-browser-support)\n* [Responsive Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#responsive-support)\n* [Mobile Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#mobile-support)\n* [Internationalization Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#internationalization-i18n-support)**\n* [Localization Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#ltr--rtl-support)\n\n** This component does not support Arabic translations\n"},1926:function(e,t,n){"use strict";n.r(t),t.default="import React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport classNames from 'classnames/bind';\nimport DatePicker from 'terra-date-picker';\nimport Field from 'terra-form-field';\nimport FieldSet from 'terra-form-fieldset';\nimport InputField from 'terra-form-input/lib/InputField';\nimport SelectField from 'terra-form-select/lib/SelectField';\nimport { injectIntl, intlShape } from 'react-intl';\nimport OnsetUtils from './OnsetUtils';\nimport styles from './OnsetPicker.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst AgeUnits = {\n  WEEKS: 'weeks',\n  MONTHS: 'months',\n  YEARS: 'years',\n};\n\nconst GranularityOptions = {\n  AGE: 'age',\n  YEAR: 'year',\n  MONTH: 'month',\n  DATE: 'date',\n};\n\nconst { PrecisionOptions } = OnsetUtils;\n\nconst DATE_FORMAT = 'YYYY-MM-DD';\n\nconst propTypes = {\n  /**\n   * The date unit of the age value. One of `weeks`, `months`, or `years`.\n   */\n  ageUnit: PropTypes.oneOf(Object.values(AgeUnits)),\n\n  /**\n   * The ISO 8601 **DATE ONLY** string representation of the birth date to calculate an onset date for the `age` precision.\n   * Also limits the earliest possible date that can be selected for an onset date for `year`, `month`, and `date` precision.\n   */\n  birthdate: PropTypes.string.isRequired,\n\n  /**\n   * The granularity of the onset date. One of `age`, `year`, `month`, or `date` is accepted.\n   */\n  granularity: PropTypes.oneOf(Object.values(GranularityOptions)),\n\n  /**\n   * The id of the onset picker. Used as the base for other required id/name in sub-components.\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * The precision of the onset date. This should be one of precisions passed to the precisionSet prop.\n   * One of `on/at`, `about`, `before`, `after`, or `unknown`.\n   */\n  precision: PropTypes.oneOf(Object.values(PrecisionOptions)),\n\n  /**\n   * The set of precisions that can be used with the onset picker.\n   * Combination of `on/at`, `about`, `before`, `after`, and `unknown`.\n   * Order of precisions determines order in precision select.\n   */\n  precisionSet: PropTypes.arrayOf(PropTypes.oneOf(Object.values(PrecisionOptions))),\n\n  /**\n   * The ISO 8601 **DATE ONLY** string representation of the onset date to view/modify.\n   */\n  onsetDate: PropTypes.string,\n\n  /**\n   * A callback function to execute when any value of the onsetDate is changed.\n   * The first parameter is a Object that contains `precision`, `granularity`, `onsetDate`, and `ageUnit`.\n   * `ageUnit` is only present if the granularity is 'age'.\n   */\n  onsetOnChange: PropTypes.func,\n\n  /**\n   * Legend for the Onset Picker field group.\n   */\n  legend: PropTypes.string,\n\n  /**\n   * Whether or not the legend is visible. Use this props to hide a legend while still creating it on the DOM for accessibility.\n   */\n  isLegendHidden: PropTypes.bool,\n\n  /**\n   * The intl object containing translations. This is retrieved from the context automatically by injectIntl.\n   */\n  intl: intlShape.isRequired,\n};\n\nconst defaultProps = {\n  precisionSet: [\n    'on/at',\n    'about',\n    'before',\n    'after',\n    'unknown',\n  ],\n  isLegendHidden: false,\n};\n\n\nclass OnsetPicker extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.changeGranularity = this.changeGranularity.bind(this);\n    this.changePrecision = this.changePrecision.bind(this);\n    this.changeAge = this.changeAge.bind(this);\n    this.changeAgeUnit = this.changeAgeUnit.bind(this);\n    this.changeYear = this.changeYear.bind(this);\n    this.changeMonth = this.changeMonth.bind(this);\n    this.changeDate = this.changeDate.bind(this);\n    this.handleOnsetUpdate = this.handleOnsetUpdate.bind(this);\n\n    let ageValues;\n    if (this.props.ageUnit) {\n      ageValues = {\n        age: this.props.onsetDate ? moment(this.props.onsetDate).diff(moment(this.props.birthdate), this.props.ageUnit) : undefined,\n        ageUnit: this.props.ageUnit,\n      };\n    } else {\n      ageValues = OnsetUtils.onsetToAge(this.props.birthdate, moment(this.props.onsetDate));\n    }\n\n    this.state = {\n      granularity: this.props.granularity,\n      precision: this.props.precision,\n      onsetDate: this.props.onsetDate ? moment(this.props.onsetDate) : undefined,\n      age: ageValues.age,\n      ageUnit: ageValues.ageUnit,\n    };\n  }\n\n  /**\n   * Change state for granularity\n   *\n   * @param {granularity} - New granularity value\n   */\n  changeGranularity(granularity) {\n    if (granularity === GranularityOptions.AGE) { // Calculate age values and update onsetDate to match age calculation\n      this.setState((prevState) => {\n        const ageValues = OnsetUtils.onsetToAge(this.props.birthdate, prevState.onsetDate);\n\n        return {\n          granularity,\n          age: ageValues.age,\n          ageUnit: ageValues.ageUnit,\n          onsetDate: prevState.onsetDate ? moment(this.props.birthdate).add(ageValues.age, ageValues.ageUnit) : undefined,\n        };\n      }, this.handleOnsetUpdate);\n    } else {\n      this.setState({ granularity }, this.handleOnsetUpdate);\n    }\n  }\n\n  /**\n   * Change state for precision\n   *\n   * @param {precision} - New precision value\n   */\n  changePrecision(precision) {\n    if (precision === PrecisionOptions.UNKNOWN) {\n      this.setState(() => ({\n        precision,\n        onsetDate: undefined,\n      }), this.handleOnsetUpdate);\n    } else {\n      this.setState({ precision }, this.handleOnsetUpdate);\n    }\n  }\n\n  /**\n   * Change state for the age when using AGE granularity, and update onset date\n   *\n   * @param {event} - Triggered change event\n   */\n  changeAge(event) {\n    let age;\n    if (event.target.value) {\n      age = Number(event.target.value);\n      this.setState((prevState) => {\n      // Check if date can be calculated\n        const ageDate = Number.isInteger(age) && prevState.ageUnit\n          ? moment(this.props.birthdate).add(age, prevState.ageUnit) : undefined;\n        // Check if date is valid\n        const validDate = ageDate && ageDate >= moment(this.props.birthdate) && ageDate <= moment();\n\n        return {\n          age,\n          onsetDate: validDate ? ageDate : undefined,\n        };\n      }, this.handleOnsetUpdate);\n    } else {\n      this.setState(() => ({\n        age: undefined,\n        onsetDate: undefined,\n      }), this.handleOnsetUpdate);\n    }\n  }\n\n  /**\n   * Change state for age unit when using AGE granularity, and update onset date\n   *\n   * @param {ageUnit} - New ageUnit\n   */\n  changeAgeUnit(ageUnit) {\n    const validAge = Number.isInteger(this.state.age);\n    // Check if date can be calculated\n    const ageDate = validAge && ageUnit ? moment(this.props.birthdate).add(this.state.age, ageUnit) : undefined;\n    // Check if date is valid\n    const validDate = (this.state.age !== undefined) ? (ageDate && ageDate >= moment(this.props.birthdate) && ageDate <= moment()) : false;\n    this.setState(() => ({\n      ageUnit,\n      onsetDate: validDate ? ageDate : undefined,\n    }), this.handleOnsetUpdate);\n  }\n\n  /**\n   * Update onset date when year changes\n   *\n   * @param {year} - New year value\n   */\n  changeYear(year) {\n    this.setState((prevState) => {\n      let newDate = prevState.onsetDate ? prevState.onsetDate.year(year) : moment().year(year);\n      const newMonths = OnsetUtils.allowedMonths(this.props.intl, this.props.birthdate, newDate);\n\n      // Check if new onset month is available, otherwise change month to first possible month\n      if (newMonths.filter(month => parseInt(month.value, 10) === newDate.month()).length === 0) {\n        newDate = moment(newDate).month(newMonths[0].value);\n      }\n\n      return { onsetDate: newDate };\n    }, this.handleOnsetUpdate);\n  }\n\n  /**\n   * Update onset date when month changes\n   *\n   * @param {month} - New month value\n   */\n  changeMonth(month) {\n    this.setState(prevState => ({\n      onsetDate: prevState.onsetDate ? prevState.onsetDate.month(month) : moment().month(month),\n    }), this.handleOnsetUpdate);\n  }\n\n  /**\n   * Update onset date when date changes\n   *\n   * @param {event} - Triggered change event\n   * @param {date} - New date value\n   */\n  changeDate(event, date) {\n    if (date === '') {\n      this.setState({ onsetDate: undefined }, this.handleOnsetUpdate);\n    } else {\n      this.setState({ onsetDate: moment(date) }, this.handleOnsetUpdate);\n    }\n  }\n\n  /**\n   * Trigger supplied callback function with an object of the current state data\n   */\n  handleOnsetUpdate() {\n    if (this.props.onsetOnChange === undefined) {\n      return;\n    }\n\n    const onsetObject = {\n      precision: this.state.precision,\n      onsetDate: this.state.onsetDate ? this.state.onsetDate.format(DATE_FORMAT) : '',\n      granularity: this.state.precision !== PrecisionOptions.UNKNOWN ? this.state.granularity : '',\n    };\n    if (this.state.granularity === GranularityOptions.AGE && this.state.precision !== PrecisionOptions.UNKNOWN) {\n      onsetObject.ageUnit = this.state.ageUnit;\n    }\n\n    this.props.onsetOnChange(onsetObject);\n  }\n\n  render() {\n    const {\n      ageUnit,\n      birthdate,\n      granularity,\n      precision,\n      precisionSet,\n      onsetDate,\n      onsetOnChange,\n      legend,\n      intl,\n      isLegendHidden,\n      ...customProps\n    } = this.props;\n\n\n    let granularitySelect = null;\n    if (this.state.precision !== PrecisionOptions.UNKNOWN) {\n      granularitySelect = (\n        <SelectField\n          className={cx('field-inline', 'granularity')}\n          defaultValue={this.state.granularity}\n          isLabelHidden\n          label={intl.formatMessage({ id: 'Terra.onsetPicker.granularityLabel' })}\n          labelAttrs={{\n            id: `${this.props.id}-granularity-select-label`,\n          }}\n          onChange={this.changeGranularity}\n          placeholder={intl.formatMessage({ id: 'Terra.onsetPicker.granularity' })}\n          selectAttrs={{\n            'aria-labelledby': `${this.props.id}-granularity-select-label`,\n          }}\n          selectId={`${this.props.id}-granularity-select`}\n        >\n          <SelectField.Option\n            value={GranularityOptions.AGE}\n            display={intl.formatMessage({ id: 'Terra.onsetPicker.age' })}\n            key={GranularityOptions.AGE}\n          />\n          <SelectField.Option\n            value={GranularityOptions.YEAR}\n            display={intl.formatMessage({ id: 'Terra.onsetPicker.year' })}\n            key={GranularityOptions.YEAR}\n          />\n          <SelectField.Option\n            value={GranularityOptions.MONTH}\n            display={intl.formatMessage({ id: 'Terra.onsetPicker.month' })}\n            key={GranularityOptions.MONTH}\n          />\n          <SelectField.Option\n            value={GranularityOptions.DATE}\n            display={intl.formatMessage({ id: 'Terra.onsetPicker.date' })}\n            key={GranularityOptions.DATE}\n          />\n        </SelectField>\n      );\n    }\n\n    let ageInput = null;\n    let ageUnitSelect = null;\n    if (this.state.granularity === GranularityOptions.AGE) {\n      ageInput = (\n        <InputField\n          className={cx('field-inline', 'age')}\n          defaultValue={this.state.age}\n          inputAttrs={{\n            type: 'number',\n            min: 0,\n            max: OnsetUtils.allowedAge(this.props.birthdate, this.state.ageUnit),\n            step: 1,\n            'aria-labelledby': `${this.props.id}-age-input-label`,\n          }}\n          inputId={`${this.props.id}-age-input`}\n          isLabelHidden\n          label={intl.formatMessage({ id: 'Terra.onsetPicker.ageLabel' })}\n          labelAttrs={{\n            id: `${this.props.id}-age-input-label`,\n          }}\n          onChange={this.changeAge}\n        />\n      );\n\n      ageUnitSelect = (\n        <SelectField\n          className={cx('field-inline', 'age-unit')}\n          defaultValue={this.state.ageUnit}\n          isLabelHidden\n          label={intl.formatMessage({ id: 'Terra.onsetPicker.agePrecisionLabel' })}\n          labelAttrs={{\n            id: `${this.props.id}-age-unit-select-label`,\n          }}\n          onChange={this.changeAgeUnit}\n          placeholder={intl.formatMessage({ id: 'Terra.onsetPicker.agePrecision' })}\n          selectAttrs={{\n            'aria-labelledby': `${this.props.id}-age-unit-select-label`,\n          }}\n          selectId={`${this.props.id}-age-unit-select`}\n        >\n          {OnsetUtils.allowedAgeUnits(this.props.birthdate, intl)\n            .map(unit => <SelectField.Option value={unit.value} display={unit.display} key={unit.value} />)}\n        </SelectField>\n      );\n    }\n\n    let monthSelect = null;\n    if (this.state.granularity === GranularityOptions.MONTH) {\n      monthSelect = (\n        <SelectField\n          className={cx('field-inline', 'month')}\n          value={this.state.onsetDate ? this.state.onsetDate.month().toString() : undefined}\n          label={intl.formatMessage({ id: 'Terra.onsetPicker.monthLabel' })}\n          labelAttrs={{\n            id: `${this.props.id}-month-select-label`,\n          }}\n          isLabelHidden\n          onChange={this.changeMonth}\n          placeholder={intl.formatMessage({ id: 'Terra.onsetPicker.month' })}\n          selectAttrs={{\n            'aria-labelledby': `${this.props.id}-month-select-label`,\n          }}\n          selectId={`${this.props.id}-month-select`}\n        >\n          {OnsetUtils.allowedMonths(intl, this.props.birthdate, this.state.onsetDate)\n            .map(month => <SelectField.Option value={month.value} display={month.display} key={month.value} />)}\n        </SelectField>\n      );\n    }\n\n    let yearSelect = null;\n    if (this.state.granularity === GranularityOptions.YEAR || this.state.granularity === GranularityOptions.MONTH) {\n      yearSelect = (\n        <SelectField\n          className={cx('field-inline', 'year')}\n          value={this.state.onsetDate ? this.state.onsetDate.year().toString() : undefined}\n          label={intl.formatMessage({ id: 'Terra.onsetPicker.yearLabel' })}\n          labelAttrs={{\n            id: `${this.props.id}-year-select-label`,\n          }}\n          isLabelHidden\n          onChange={this.changeYear}\n          placeholder={intl.formatMessage({ id: 'Terra.onsetPicker.year' })}\n          selectAttrs={{\n            'aria-labelledby': `${this.props.id}-year-select-label`,\n          }}\n          selectId={`${this.props.id}-year-select`}\n        >\n          {OnsetUtils.allowedYears(this.props.birthdate)\n            .map(year => <SelectField.Option value={year.value} display={year.display} key={year.value} />)}\n        </SelectField>\n      );\n    }\n\n    let dateSelect = null;\n    if (this.state.granularity === GranularityOptions.DATE) {\n      dateSelect = (\n        <Field\n          className={cx('field-inline')}\n          isLabelHidden\n          label={intl.formatMessage({ id: 'Terra.onsetPicker.dateLabel' })}\n          labelAttrs={{\n            id: `${this.props.id}-date-input-label`,\n          }}\n        >\n          <DatePicker\n            inputAttributes={{\n              'aria-labelledby': `${this.props.id}-date-input-label`,\n            }}\n            onChange={this.changeDate}\n            minDate={this.props.birthdate}\n            maxDate={moment().format(DATE_FORMAT)}\n            selectedDate={this.state.onsetDate ? this.state.onsetDate.format(DATE_FORMAT) : undefined}\n            name={`${this.props.id}-date-input`}\n          />\n        </Field>\n      );\n    }\n\n    return (\n      <div id={this.props.id} {...customProps}>\n        <FieldSet className={cx('fieldset')} legend={legend} isLegendHidden={isLegendHidden}>\n          {/* Precision */}\n          <SelectField\n            className={cx('field-inline', 'precision')}\n            defaultValue={this.state.precision}\n            label={intl.formatMessage({ id: 'Terra.onsetPicker.precisionLabel' })}\n            labelAttrs={{\n              id: `${this.props.id}-precision-select-label`,\n            }}\n            isLabelHidden\n            onChange={this.changePrecision}\n            placeholder={intl.formatMessage({ id: 'Terra.onsetPicker.precision' })}\n            selectAttrs={{\n              'aria-labelledby': `${this.props.id}-precision-select-label`,\n            }}\n            selectId={`${this.props.id}-precision-select`}\n          >\n            {OnsetUtils.allowedPrecisions(intl, this.props.precisionSet)\n              .map(prec => <SelectField.Option value={prec.value} display={prec.display} key={prec.value} />)}\n          </SelectField>\n\n          {granularitySelect}\n\n          {(this.state.precision !== PrecisionOptions.UNKNOWN) && (\n            <div>\n              {ageInput}\n              {ageUnitSelect}\n              {monthSelect}\n              {yearSelect}\n              {dateSelect}\n            </div>\n          )}\n        </FieldSet>\n      </div>\n    );\n  }\n}\n\nOnsetPicker.propTypes = propTypes;\nOnsetPicker.defaultProps = defaultProps;\n\nexport default injectIntl(OnsetPicker);\nexport {\n  AgeUnits,\n  GranularityOptions,\n  PrecisionOptions,\n};\n"},1927:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=s(n(0)),i=s(n(1191)),r=s(n(1248));function s(e){return e&&e.__esModule?e:{default:e}}var o=(0,i.default)().subtract(6,"years"),l=function(){return a.default.createElement("div",null,a.default.createElement("p",null,"Birthdate: ".concat(o.format("MM-DD-YYYY"))),a.default.createElement(r.default,{legend:"Onset of symptoms",birthdate:o.format("YYYY-MM-DD"),id:"doogs"}))};t.default=l},1950:function(e,t,n){"use strict";n.r(t),t.default="import React from 'react';\nimport moment from 'moment';\nimport OnsetPicker from 'terra-clinical-onset-picker';\n\nconst birthdate = moment().subtract(6, 'years');\nconst picker = () => (\n  <div>\n    <p>{`Birthdate: ${birthdate.format('MM-DD-YYYY')}`}</p>\n    <OnsetPicker\n      legend=\"Onset of symptoms\"\n      birthdate={birthdate.format('YYYY-MM-DD')}\n      id=\"doogs\"\n    />\n  </div>\n);\n\nexport default picker;\n"},1951:function(e,t,n){"use strict";function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=o(n(0)),r=o(n(1191)),s=o(n(1248));function o(e){return e&&e.__esModule?e:{default:e}}function l(e){return(l="function"==typeof Symbol&&"symbol"===a(Symbol.iterator)?function(e){return a(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":a(e)})(e)}function d(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function p(e){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var h=function(e){function t(e){var n,a,i;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),a=this,(n=!(i=p(t).call(this,e))||"object"!==l(i)&&"function"!=typeof i?c(a):i).state={precision:"before",granularity:"year",onsetDate:(0,r.default)().subtract(2,"years").format("YYYY-MM-DD")},n.handleOnset=n.handleOnset.bind(c(n)),n.handleSubmit=n.handleSubmit.bind(c(n)),n}var n,a,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(t,e),n=t,(a=[{key:"handleOnset",value:function(e){this.setState({precision:e.precision,granularity:e.granularity,onsetDate:e.onsetDate,ageUnit:e.ageUnit})}},{key:"handleSubmit",value:function(e){e.preventDefault(),this.setState((function(e){return{submittedData:{precision:e.precision,granularity:e.granularity,onsetDate:e.onsetDate,ageUnit:e.ageUnit}}}))}},{key:"render",value:function(){var e=(0,r.default)().subtract(6,"years");return i.default.createElement("form",{onSubmit:this.handleSubmit},i.default.createElement("p",null,"Birthdate: ".concat(e.format("MM-DD-YYYY"))),i.default.createElement(s.default,{birthdate:e.format("YYYY-MM-DD"),granularity:this.state.granularity,id:"doogs-supplied",precision:this.state.precision,precisionSet:["unknown","after","before","on/at"],onsetDate:this.state.onsetDate,legend:"Date of Birth",onsetOnChange:this.handleOnset}),i.default.createElement("button",{type:"submit"},"Submit"),this.state.submittedData&&i.default.createElement("div",null,i.default.createElement("hr",null),i.default.createElement("p",null,"Form was submitted with"),i.default.createElement("p",null,JSON.stringify(this.state.submittedData,null,2))))}}])&&d(n.prototype,a),o&&d(n,o),t}(i.default.Component);t.default=h},1952:function(e,t,n){"use strict";n.r(t),t.default="import React from 'react';\nimport moment from 'moment';\nimport OnsetPicker from 'terra-clinical-onset-picker';\n\nclass HandledOnsetExample extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      precision: 'before',\n      granularity: 'year',\n      onsetDate: moment().subtract(2, 'years').format('YYYY-MM-DD'),\n    };\n\n    this.handleOnset = this.handleOnset.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleOnset(onsetObject) {\n    this.setState({\n      precision: onsetObject.precision,\n      granularity: onsetObject.granularity,\n      onsetDate: onsetObject.onsetDate,\n      ageUnit: onsetObject.ageUnit,\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    this.setState(prevState => ({\n      submittedData: {\n        precision: prevState.precision,\n        granularity: prevState.granularity,\n        onsetDate: prevState.onsetDate,\n        ageUnit: prevState.ageUnit,\n      },\n    }));\n  }\n\n  render() {\n    const birthdate = moment().subtract(6, 'years');\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <p>{`Birthdate: ${birthdate.format('MM-DD-YYYY')}`}</p>\n        <OnsetPicker\n          birthdate={birthdate.format('YYYY-MM-DD')}\n          granularity={this.state.granularity}\n          id=\"doogs-supplied\"\n          precision={this.state.precision}\n          precisionSet={[\n            'unknown',\n            'after',\n            'before',\n            'on/at',\n          ]}\n          onsetDate={this.state.onsetDate}\n          legend=\"Date of Birth\"\n          onsetOnChange={this.handleOnset}\n        />\n        <button type=\"submit\">Submit</button>\n        {this.state.submittedData && (\n          <div>\n            <hr />\n            <p>Form was submitted with</p>\n            <p>{JSON.stringify(this.state.submittedData, null, 2)}</p>\n          </div>\n        )}\n      </form>\n    );\n  }\n}\n\nexport default HandledOnsetExample;\n"},1953:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=s(n(0)),i=s(n(1191)),r=s(n(1248));function s(e){return e&&e.__esModule?e:{default:e}}var o=function(){return a.default.createElement(r.default,{birthdate:(0,i.default)().subtract(6,"years").format("YYYY-MM-DD"),id:"onsetlegend",legend:"Date of Birth",isLegendHidden:!0})};t.default=o},1986:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=h(n(0)),i=h(n(1200)),r=h(n(1925)),s=n(1373),o=h(n(1926)),l=h(n(1927)),d=h(n(1950)),p=h(n(1951)),c=h(n(1952)),u=h(n(1953));function h(e){return e&&e.__esModule?e:{default:e}}var m=function(){return a.default.createElement(i.default,{packageName:s.name,readme:r.default,srcPath:"https://github.com/cerner/terra-clinical/tree/master/packages/".concat(s.name),examples:[{title:"Default with initialization",example:a.default.createElement(l.default,null),source:d.default},{title:"Onset picker with supplied data and handlers",example:a.default.createElement(p.default,null),source:c.default},{title:"Onset picker with Hidden legend",example:a.default.createElement(u.default,null),source:u.default}],propsTables:[{componentName:"Onset Picker",componentSrc:o.default}]})};t.default=m}}]);
//# sourceMappingURL=69-7ad8804b98329ad62562.js.map