{"version":3,"sources":["webpack:///./packages/terra-clinical-onset-picker/docs/README.md","webpack:///./packages/terra-clinical-onset-picker/src/OnsetPicker.jsx","webpack:///./packages/terra-clinical-onset-picker/lib/terra-dev-site/doc/example/DefaultOnset.js","webpack:///./packages/terra-clinical-onset-picker/src/terra-dev-site/doc/example/DefaultOnset.jsx","webpack:///./packages/terra-clinical-onset-picker/lib/terra-dev-site/doc/example/HandledOnset.js","webpack:///./packages/terra-clinical-onset-picker/src/terra-dev-site/doc/example/HandledOnset.jsx","webpack:///./packages/terra-clinical-onset-picker/lib/terra-dev-site/doc/example/OnsetWithHiddenLegend.js","webpack:///./packages/terra-clinical-onset-picker/lib/terra-dev-site/doc/clinical-onset-picker/ClinicalOnsetPicker.1.doc.js"],"names":["Object","defineProperty","exports","value","default","_react","_interopRequireDefault","require","_moment","_terraClinicalOnsetPicker","obj","__esModule","birthdate","subtract","_default","createElement","concat","format","legend","id","_typeof","Symbol","iterator","constructor","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_assertThisInitialized","self","ReferenceError","_setPrototypeOf","p","_React$Component","HandledOnsetExample","_this","call","instance","Constructor","TypeError","_classCallCheck","this","state","precision","granularity","onsetDate","handleOnset","bind","handleSubmit","protoProps","staticProps","subClass","superClass","create","_inherits","onsetObject","setState","ageUnit","e","preventDefault","prevState","submittedData","onSubmit","precisionSet","onsetOnChange","type","JSON","stringify","Component","isLegendHidden","_terraDocTemplate","_README","_package","_OnsetPicker","_DefaultOnset","_DefaultOnset2","_HandledOnset","_HandledOnset2","_OnsetWithHiddenLegend","packageName","name","readme","srcPath","examples","title","example","source","propsTables","componentName","componentSrc"],"mappings":"k9CAAA,OAAe,87C,kCCAf,OAAe,k+hB,kCCEfA,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAElB,IAAIC,EAASC,EAAuBC,EAAQ,IAExCC,EAAUF,EAAuBC,EAAQ,OAEzCE,EAA4BH,EAAuBC,EAAQ,OAE/D,SAASD,EAAuBI,GAAO,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CAAEN,QAASM,GAEvF,IAAIE,GAAY,EAAIJ,EAAQJ,WAAWS,SAAS,EAAG,SAU/CC,EARS,WACX,OAAOT,EAAOD,QAAQW,cAAc,MAAO,KAAMV,EAAOD,QAAQW,cAAc,IAAK,KAAM,cAAcC,OAAOJ,EAAUK,OAAO,gBAAiBZ,EAAOD,QAAQW,cAAcN,EAA0BL,QAAS,CAC9Mc,OAAQ,oBACRN,UAAWA,EAAUK,OAAO,cAC5BE,GAAI,YAKRjB,EAAQE,QAAUU,G,kCC1BlB,OAAe,8b,uQCEfd,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAElB,IAAIC,EAASC,EAAuBC,EAAQ,IAExCC,EAAUF,EAAuBC,EAAQ,OAEzCE,EAA4BH,EAAuBC,EAAQ,OAE/D,SAASD,EAAuBI,GAAO,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CAAEN,QAASM,GAEvF,SAASU,EAAQV,GAAwT,OAAtOU,EAArD,mBAAXC,QAAoD,WAA3B,EAAOA,OAAOC,UAAmC,SAAiBZ,GAAO,SAAcA,IAA2B,SAAiBA,GAAO,OAAOA,GAAyB,mBAAXW,QAAyBX,EAAIa,cAAgBF,QAAUX,IAAQW,OAAOG,UAAY,SAAhG,EAAkHd,KAAyBA,GAIxV,SAASe,EAAkBC,EAAQC,GAAS,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,IAAIE,EAAaH,EAAMC,GAAIE,EAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,UAAWF,IAAYA,EAAWG,UAAW,GAAMjC,OAAOC,eAAeyB,EAAQI,EAAWI,IAAKJ,IAM7S,SAASK,EAAgBC,GAAwJ,OAAnJD,EAAkBnC,OAAOqC,eAAiBrC,OAAOsC,eAAiB,SAAyBF,GAAK,OAAOA,EAAEG,WAAavC,OAAOsC,eAAeF,KAA8BA,GAExM,SAASI,EAAuBC,GAAQ,QAAa,IAATA,EAAmB,MAAM,IAAIC,eAAe,6DAAgE,OAAOD,EAI/J,SAASE,EAAgBP,EAAGQ,GAA+G,OAA1GD,EAAkB3C,OAAOqC,gBAAkB,SAAyBD,EAAGQ,GAAsB,OAAjBR,EAAEG,UAAYK,EAAUR,IAA6BA,EAAGQ,GAErK,IAsEI9B,EApEJ,SAAU+B,GAGR,SAASC,EAAoBnB,GAC3B,IAAIoB,EAhB4BN,EAAMO,EA4BtC,OAlCJ,SAAyBC,EAAUC,GAAe,KAAMD,aAAoBC,GAAgB,MAAM,IAAIC,UAAU,qCAwB5GC,CAAgBC,KAAMP,GAlBUL,EAoBGY,MAAnCN,IApBsCC,EAoBGb,EAAgBW,GAAqBE,KAAKK,KAAM1B,KApBZ,WAAlBP,EAAQ4B,IAAsC,mBAATA,EAA8CR,EAAuBC,GAAtCO,GAqBzHM,MAAQ,CACZC,UAAW,SACXC,YAAa,OACbC,WAAW,EAAIjD,EAAQJ,WAAWS,SAAS,EAAG,SAASI,OAAO,eAEhE8B,EAAMW,YAAcX,EAAMW,YAAYC,KAAKnB,EAAuBO,IAClEA,EAAMa,aAAeb,EAAMa,aAAaD,KAAKnB,EAAuBO,IAC7DA,EA9BX,IAAsBG,EAAaW,EAAYC,EA+E7C,OAvEF,SAAmBC,EAAUC,GAAc,GAA0B,mBAAfA,GAA4C,OAAfA,EAAuB,MAAM,IAAIb,UAAU,sDAAyDY,EAASvC,UAAYxB,OAAOiE,OAAOD,GAAcA,EAAWxC,UAAW,CAAED,YAAa,CAAEpB,MAAO4D,EAAU9B,UAAU,EAAMD,cAAc,KAAegC,GAAYrB,EAAgBoB,EAAUC,GAOjXE,CAAUpB,EAAqBD,GAfXK,EAiCPJ,GAjCoBe,EAiCC,CAAC,CACjC3B,IAAK,cACL/B,MAAO,SAAqBgE,GAC1Bd,KAAKe,SAAS,CACZb,UAAWY,EAAYZ,UACvBC,YAAaW,EAAYX,YACzBC,UAAWU,EAAYV,UACvBY,QAASF,EAAYE,YAGxB,CACDnC,IAAK,eACL/B,MAAO,SAAsBmE,GAC3BA,EAAEC,iBACFlB,KAAKe,UAAS,SAAUI,GACtB,MAAO,CACLC,cAAe,CACblB,UAAWiB,EAAUjB,UACrBC,YAAagB,EAAUhB,YACvBC,UAAWe,EAAUf,UACrBY,QAASG,EAAUH,eAK1B,CACDnC,IAAK,SACL/B,MAAO,WACL,IAAIS,GAAY,EAAIJ,EAAQJ,WAAWS,SAAS,EAAG,SACnD,OAAOR,EAAOD,QAAQW,cAAc,OAAQ,CAC1C2D,SAAUrB,KAAKO,cACdvD,EAAOD,QAAQW,cAAc,IAAK,KAAM,cAAcC,OAAOJ,EAAUK,OAAO,gBAAiBZ,EAAOD,QAAQW,cAAcN,EAA0BL,QAAS,CAChKQ,UAAWA,EAAUK,OAAO,cAC5BuC,YAAaH,KAAKC,MAAME,YACxBrC,GAAI,iBACJoC,UAAWF,KAAKC,MAAMC,UACtBoB,aAAc,CAAC,UAAW,QAAS,SAAU,SAC7ClB,UAAWJ,KAAKC,MAAMG,UACtBvC,OAAQ,gBACR0D,cAAevB,KAAKK,cAClBrD,EAAOD,QAAQW,cAAc,SAAU,CACzC8D,KAAM,UACL,UAAWxB,KAAKC,MAAMmB,eAAiBpE,EAAOD,QAAQW,cAAc,MAAO,KAAMV,EAAOD,QAAQW,cAAc,KAAM,MAAOV,EAAOD,QAAQW,cAAc,IAAK,KAAM,2BAA4BV,EAAOD,QAAQW,cAAc,IAAK,KAAM+D,KAAKC,UAAU1B,KAAKC,MAAMmB,cAAe,KAAM,WA3EjNhD,EAAkByB,EAAY1B,UAAWqC,GAAiBC,GAAarC,EAAkByB,EAAaY,GA+E3KhB,EAjET,CAkEEzC,EAAOD,QAAQ4E,WAGjB9E,EAAQE,QAAUU,G,kCCxGlB,OAAe,6+D,kCCEfd,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAElB,IAAIC,EAASC,EAAuBC,EAAQ,IAExCC,EAAUF,EAAuBC,EAAQ,OAEzCE,EAA4BH,EAAuBC,EAAQ,OAE/D,SAASD,EAAuBI,GAAO,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CAAEN,QAASM,GAEvF,IASII,EATwB,WAC1B,OAAOT,EAAOD,QAAQW,cAAcN,EAA0BL,QAAS,CACrEQ,WAAW,EAAIJ,EAAQJ,WAAWS,SAAS,EAAG,SAASI,OAAO,cAC9DE,GAAI,cACJD,OAAQ,gBACR+D,gBAAgB,KAKpB/E,EAAQE,QAAUU,G,kCCvBlBd,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAElB,IAAIC,EAASC,EAAuBC,EAAQ,IAExC2E,EAAoB5E,EAAuBC,EAAQ,OAEnD4E,EAAU7E,EAAuBC,EAAQ,OAEzC6E,EAAW7E,EAAQ,MAEnB8E,EAAe/E,EAAuBC,EAAQ,OAE9C+E,EAAgBhF,EAAuBC,EAAQ,OAE/CgF,EAAiBjF,EAAuBC,EAAQ,OAEhDiF,EAAgBlF,EAAuBC,EAAQ,OAE/CkF,EAAiBnF,EAAuBC,EAAQ,OAEhDmF,EAAyBpF,EAAuBC,EAAQ,OAE5D,SAASD,EAAuBI,GAAO,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CAAEN,QAASM,GAIvF,IAyBII,EAzBU,WACZ,OAAOT,EAAOD,QAAQW,cAAcmE,EAAkB9E,QAAS,CAC7DuF,YAAaP,EAASQ,KACtBC,OAAQV,EAAQ/E,QAChB0F,QAAS,iEAAiE9E,OAAOoE,EAASQ,MAC1FG,SAAU,CAAC,CACTC,MAAO,8BACPC,QAAS5F,EAAOD,QAAQW,cAAcuE,EAAclF,QAAS,MAC7D8F,OAAQX,EAAenF,SACtB,CACD4F,MAAO,+CACPC,QAAS5F,EAAOD,QAAQW,cAAcyE,EAAcpF,QAAS,MAC7D8F,OAAQT,EAAerF,SACtB,CACD4F,MAAO,kCACPC,QAAS5F,EAAOD,QAAQW,cAAc2E,EAAuBtF,QAAS,MACtE8F,OAAQR,EAAuBtF,UAEjC+F,YAAa,CAAC,CACZC,cAAe,eACfC,aAAchB,EAAajF,aAMjCF,EAAQE,QAAUU","file":"69-7ad8804b98329ad62562.js","sourcesContent":["export default \"# Terra Clinical Onset Picker\\n\\nThe terra-clinical-onset-picker component provides users a way to enter or select an approximate date for use in onset scenarios. The onset date is limited to occurring after the birth date supplied. For `AGE` granularity, the age input has a maximum of `8` for `Week(s)` unit, and `24` for `Month(s)` unit. The user is expected to use `Month(s)` and `Year(s)` respectively for larger values.\\n\\n## Getting Started\\n\\n- Install with [npmjs](https://www.npmjs.com):\\n  - `npm install terra-clinical-onset-picker`\\n\\n\\n## Component Features\\n* [Cross-Browser Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#cross-browser-support)\\n* [Responsive Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#responsive-support)\\n* [Mobile Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#mobile-support)\\n* [Internationalization Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#internationalization-i18n-support)**\\n* [Localization Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#ltr--rtl-support)\\n\\n** This component does not support Arabic translations\\n\"","export default \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport moment from 'moment';\\nimport classNames from 'classnames/bind';\\nimport DatePicker from 'terra-date-picker';\\nimport Field from 'terra-form-field';\\nimport FieldSet from 'terra-form-fieldset';\\nimport InputField from 'terra-form-input/lib/InputField';\\nimport SelectField from 'terra-form-select/lib/SelectField';\\nimport { injectIntl, intlShape } from 'react-intl';\\nimport OnsetUtils from './OnsetUtils';\\nimport styles from './OnsetPicker.module.scss';\\n\\nconst cx = classNames.bind(styles);\\n\\nconst AgeUnits = {\\n  WEEKS: 'weeks',\\n  MONTHS: 'months',\\n  YEARS: 'years',\\n};\\n\\nconst GranularityOptions = {\\n  AGE: 'age',\\n  YEAR: 'year',\\n  MONTH: 'month',\\n  DATE: 'date',\\n};\\n\\nconst { PrecisionOptions } = OnsetUtils;\\n\\nconst DATE_FORMAT = 'YYYY-MM-DD';\\n\\nconst propTypes = {\\n  /**\\n   * The date unit of the age value. One of `weeks`, `months`, or `years`.\\n   */\\n  ageUnit: PropTypes.oneOf(Object.values(AgeUnits)),\\n\\n  /**\\n   * The ISO 8601 **DATE ONLY** string representation of the birth date to calculate an onset date for the `age` precision.\\n   * Also limits the earliest possible date that can be selected for an onset date for `year`, `month`, and `date` precision.\\n   */\\n  birthdate: PropTypes.string.isRequired,\\n\\n  /**\\n   * The granularity of the onset date. One of `age`, `year`, `month`, or `date` is accepted.\\n   */\\n  granularity: PropTypes.oneOf(Object.values(GranularityOptions)),\\n\\n  /**\\n   * The id of the onset picker. Used as the base for other required id/name in sub-components.\\n   */\\n  id: PropTypes.string.isRequired,\\n\\n  /**\\n   * The precision of the onset date. This should be one of precisions passed to the precisionSet prop.\\n   * One of `on/at`, `about`, `before`, `after`, or `unknown`.\\n   */\\n  precision: PropTypes.oneOf(Object.values(PrecisionOptions)),\\n\\n  /**\\n   * The set of precisions that can be used with the onset picker.\\n   * Combination of `on/at`, `about`, `before`, `after`, and `unknown`.\\n   * Order of precisions determines order in precision select.\\n   */\\n  precisionSet: PropTypes.arrayOf(PropTypes.oneOf(Object.values(PrecisionOptions))),\\n\\n  /**\\n   * The ISO 8601 **DATE ONLY** string representation of the onset date to view/modify.\\n   */\\n  onsetDate: PropTypes.string,\\n\\n  /**\\n   * A callback function to execute when any value of the onsetDate is changed.\\n   * The first parameter is a Object that contains `precision`, `granularity`, `onsetDate`, and `ageUnit`.\\n   * `ageUnit` is only present if the granularity is 'age'.\\n   */\\n  onsetOnChange: PropTypes.func,\\n\\n  /**\\n   * Legend for the Onset Picker field group.\\n   */\\n  legend: PropTypes.string,\\n\\n  /**\\n   * Whether or not the legend is visible. Use this props to hide a legend while still creating it on the DOM for accessibility.\\n   */\\n  isLegendHidden: PropTypes.bool,\\n\\n  /**\\n   * The intl object containing translations. This is retrieved from the context automatically by injectIntl.\\n   */\\n  intl: intlShape.isRequired,\\n};\\n\\nconst defaultProps = {\\n  precisionSet: [\\n    'on/at',\\n    'about',\\n    'before',\\n    'after',\\n    'unknown',\\n  ],\\n  isLegendHidden: false,\\n};\\n\\n\\nclass OnsetPicker extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.changeGranularity = this.changeGranularity.bind(this);\\n    this.changePrecision = this.changePrecision.bind(this);\\n    this.changeAge = this.changeAge.bind(this);\\n    this.changeAgeUnit = this.changeAgeUnit.bind(this);\\n    this.changeYear = this.changeYear.bind(this);\\n    this.changeMonth = this.changeMonth.bind(this);\\n    this.changeDate = this.changeDate.bind(this);\\n    this.handleOnsetUpdate = this.handleOnsetUpdate.bind(this);\\n\\n    let ageValues;\\n    if (this.props.ageUnit) {\\n      ageValues = {\\n        age: this.props.onsetDate ? moment(this.props.onsetDate).diff(moment(this.props.birthdate), this.props.ageUnit) : undefined,\\n        ageUnit: this.props.ageUnit,\\n      };\\n    } else {\\n      ageValues = OnsetUtils.onsetToAge(this.props.birthdate, moment(this.props.onsetDate));\\n    }\\n\\n    this.state = {\\n      granularity: this.props.granularity,\\n      precision: this.props.precision,\\n      onsetDate: this.props.onsetDate ? moment(this.props.onsetDate) : undefined,\\n      age: ageValues.age,\\n      ageUnit: ageValues.ageUnit,\\n    };\\n  }\\n\\n  /**\\n   * Change state for granularity\\n   *\\n   * @param {granularity} - New granularity value\\n   */\\n  changeGranularity(granularity) {\\n    if (granularity === GranularityOptions.AGE) { // Calculate age values and update onsetDate to match age calculation\\n      this.setState((prevState) => {\\n        const ageValues = OnsetUtils.onsetToAge(this.props.birthdate, prevState.onsetDate);\\n\\n        return {\\n          granularity,\\n          age: ageValues.age,\\n          ageUnit: ageValues.ageUnit,\\n          onsetDate: prevState.onsetDate ? moment(this.props.birthdate).add(ageValues.age, ageValues.ageUnit) : undefined,\\n        };\\n      }, this.handleOnsetUpdate);\\n    } else {\\n      this.setState({ granularity }, this.handleOnsetUpdate);\\n    }\\n  }\\n\\n  /**\\n   * Change state for precision\\n   *\\n   * @param {precision} - New precision value\\n   */\\n  changePrecision(precision) {\\n    if (precision === PrecisionOptions.UNKNOWN) {\\n      this.setState(() => ({\\n        precision,\\n        onsetDate: undefined,\\n      }), this.handleOnsetUpdate);\\n    } else {\\n      this.setState({ precision }, this.handleOnsetUpdate);\\n    }\\n  }\\n\\n  /**\\n   * Change state for the age when using AGE granularity, and update onset date\\n   *\\n   * @param {event} - Triggered change event\\n   */\\n  changeAge(event) {\\n    let age;\\n    if (event.target.value) {\\n      age = Number(event.target.value);\\n      this.setState((prevState) => {\\n      // Check if date can be calculated\\n        const ageDate = Number.isInteger(age) && prevState.ageUnit\\n          ? moment(this.props.birthdate).add(age, prevState.ageUnit) : undefined;\\n        // Check if date is valid\\n        const validDate = ageDate && ageDate >= moment(this.props.birthdate) && ageDate <= moment();\\n\\n        return {\\n          age,\\n          onsetDate: validDate ? ageDate : undefined,\\n        };\\n      }, this.handleOnsetUpdate);\\n    } else {\\n      this.setState(() => ({\\n        age: undefined,\\n        onsetDate: undefined,\\n      }), this.handleOnsetUpdate);\\n    }\\n  }\\n\\n  /**\\n   * Change state for age unit when using AGE granularity, and update onset date\\n   *\\n   * @param {ageUnit} - New ageUnit\\n   */\\n  changeAgeUnit(ageUnit) {\\n    const validAge = Number.isInteger(this.state.age);\\n    // Check if date can be calculated\\n    const ageDate = validAge && ageUnit ? moment(this.props.birthdate).add(this.state.age, ageUnit) : undefined;\\n    // Check if date is valid\\n    const validDate = (this.state.age !== undefined) ? (ageDate && ageDate >= moment(this.props.birthdate) && ageDate <= moment()) : false;\\n    this.setState(() => ({\\n      ageUnit,\\n      onsetDate: validDate ? ageDate : undefined,\\n    }), this.handleOnsetUpdate);\\n  }\\n\\n  /**\\n   * Update onset date when year changes\\n   *\\n   * @param {year} - New year value\\n   */\\n  changeYear(year) {\\n    this.setState((prevState) => {\\n      let newDate = prevState.onsetDate ? prevState.onsetDate.year(year) : moment().year(year);\\n      const newMonths = OnsetUtils.allowedMonths(this.props.intl, this.props.birthdate, newDate);\\n\\n      // Check if new onset month is available, otherwise change month to first possible month\\n      if (newMonths.filter(month => parseInt(month.value, 10) === newDate.month()).length === 0) {\\n        newDate = moment(newDate).month(newMonths[0].value);\\n      }\\n\\n      return { onsetDate: newDate };\\n    }, this.handleOnsetUpdate);\\n  }\\n\\n  /**\\n   * Update onset date when month changes\\n   *\\n   * @param {month} - New month value\\n   */\\n  changeMonth(month) {\\n    this.setState(prevState => ({\\n      onsetDate: prevState.onsetDate ? prevState.onsetDate.month(month) : moment().month(month),\\n    }), this.handleOnsetUpdate);\\n  }\\n\\n  /**\\n   * Update onset date when date changes\\n   *\\n   * @param {event} - Triggered change event\\n   * @param {date} - New date value\\n   */\\n  changeDate(event, date) {\\n    if (date === '') {\\n      this.setState({ onsetDate: undefined }, this.handleOnsetUpdate);\\n    } else {\\n      this.setState({ onsetDate: moment(date) }, this.handleOnsetUpdate);\\n    }\\n  }\\n\\n  /**\\n   * Trigger supplied callback function with an object of the current state data\\n   */\\n  handleOnsetUpdate() {\\n    if (this.props.onsetOnChange === undefined) {\\n      return;\\n    }\\n\\n    const onsetObject = {\\n      precision: this.state.precision,\\n      onsetDate: this.state.onsetDate ? this.state.onsetDate.format(DATE_FORMAT) : '',\\n      granularity: this.state.precision !== PrecisionOptions.UNKNOWN ? this.state.granularity : '',\\n    };\\n    if (this.state.granularity === GranularityOptions.AGE && this.state.precision !== PrecisionOptions.UNKNOWN) {\\n      onsetObject.ageUnit = this.state.ageUnit;\\n    }\\n\\n    this.props.onsetOnChange(onsetObject);\\n  }\\n\\n  render() {\\n    const {\\n      ageUnit,\\n      birthdate,\\n      granularity,\\n      precision,\\n      precisionSet,\\n      onsetDate,\\n      onsetOnChange,\\n      legend,\\n      intl,\\n      isLegendHidden,\\n      ...customProps\\n    } = this.props;\\n\\n\\n    let granularitySelect = null;\\n    if (this.state.precision !== PrecisionOptions.UNKNOWN) {\\n      granularitySelect = (\\n        <SelectField\\n          className={cx('field-inline', 'granularity')}\\n          defaultValue={this.state.granularity}\\n          isLabelHidden\\n          label={intl.formatMessage({ id: 'Terra.onsetPicker.granularityLabel' })}\\n          labelAttrs={{\\n            id: `${this.props.id}-granularity-select-label`,\\n          }}\\n          onChange={this.changeGranularity}\\n          placeholder={intl.formatMessage({ id: 'Terra.onsetPicker.granularity' })}\\n          selectAttrs={{\\n            'aria-labelledby': `${this.props.id}-granularity-select-label`,\\n          }}\\n          selectId={`${this.props.id}-granularity-select`}\\n        >\\n          <SelectField.Option\\n            value={GranularityOptions.AGE}\\n            display={intl.formatMessage({ id: 'Terra.onsetPicker.age' })}\\n            key={GranularityOptions.AGE}\\n          />\\n          <SelectField.Option\\n            value={GranularityOptions.YEAR}\\n            display={intl.formatMessage({ id: 'Terra.onsetPicker.year' })}\\n            key={GranularityOptions.YEAR}\\n          />\\n          <SelectField.Option\\n            value={GranularityOptions.MONTH}\\n            display={intl.formatMessage({ id: 'Terra.onsetPicker.month' })}\\n            key={GranularityOptions.MONTH}\\n          />\\n          <SelectField.Option\\n            value={GranularityOptions.DATE}\\n            display={intl.formatMessage({ id: 'Terra.onsetPicker.date' })}\\n            key={GranularityOptions.DATE}\\n          />\\n        </SelectField>\\n      );\\n    }\\n\\n    let ageInput = null;\\n    let ageUnitSelect = null;\\n    if (this.state.granularity === GranularityOptions.AGE) {\\n      ageInput = (\\n        <InputField\\n          className={cx('field-inline', 'age')}\\n          defaultValue={this.state.age}\\n          inputAttrs={{\\n            type: 'number',\\n            min: 0,\\n            max: OnsetUtils.allowedAge(this.props.birthdate, this.state.ageUnit),\\n            step: 1,\\n            'aria-labelledby': `${this.props.id}-age-input-label`,\\n          }}\\n          inputId={`${this.props.id}-age-input`}\\n          isLabelHidden\\n          label={intl.formatMessage({ id: 'Terra.onsetPicker.ageLabel' })}\\n          labelAttrs={{\\n            id: `${this.props.id}-age-input-label`,\\n          }}\\n          onChange={this.changeAge}\\n        />\\n      );\\n\\n      ageUnitSelect = (\\n        <SelectField\\n          className={cx('field-inline', 'age-unit')}\\n          defaultValue={this.state.ageUnit}\\n          isLabelHidden\\n          label={intl.formatMessage({ id: 'Terra.onsetPicker.agePrecisionLabel' })}\\n          labelAttrs={{\\n            id: `${this.props.id}-age-unit-select-label`,\\n          }}\\n          onChange={this.changeAgeUnit}\\n          placeholder={intl.formatMessage({ id: 'Terra.onsetPicker.agePrecision' })}\\n          selectAttrs={{\\n            'aria-labelledby': `${this.props.id}-age-unit-select-label`,\\n          }}\\n          selectId={`${this.props.id}-age-unit-select`}\\n        >\\n          {OnsetUtils.allowedAgeUnits(this.props.birthdate, intl)\\n            .map(unit => <SelectField.Option value={unit.value} display={unit.display} key={unit.value} />)}\\n        </SelectField>\\n      );\\n    }\\n\\n    let monthSelect = null;\\n    if (this.state.granularity === GranularityOptions.MONTH) {\\n      monthSelect = (\\n        <SelectField\\n          className={cx('field-inline', 'month')}\\n          value={this.state.onsetDate ? this.state.onsetDate.month().toString() : undefined}\\n          label={intl.formatMessage({ id: 'Terra.onsetPicker.monthLabel' })}\\n          labelAttrs={{\\n            id: `${this.props.id}-month-select-label`,\\n          }}\\n          isLabelHidden\\n          onChange={this.changeMonth}\\n          placeholder={intl.formatMessage({ id: 'Terra.onsetPicker.month' })}\\n          selectAttrs={{\\n            'aria-labelledby': `${this.props.id}-month-select-label`,\\n          }}\\n          selectId={`${this.props.id}-month-select`}\\n        >\\n          {OnsetUtils.allowedMonths(intl, this.props.birthdate, this.state.onsetDate)\\n            .map(month => <SelectField.Option value={month.value} display={month.display} key={month.value} />)}\\n        </SelectField>\\n      );\\n    }\\n\\n    let yearSelect = null;\\n    if (this.state.granularity === GranularityOptions.YEAR || this.state.granularity === GranularityOptions.MONTH) {\\n      yearSelect = (\\n        <SelectField\\n          className={cx('field-inline', 'year')}\\n          value={this.state.onsetDate ? this.state.onsetDate.year().toString() : undefined}\\n          label={intl.formatMessage({ id: 'Terra.onsetPicker.yearLabel' })}\\n          labelAttrs={{\\n            id: `${this.props.id}-year-select-label`,\\n          }}\\n          isLabelHidden\\n          onChange={this.changeYear}\\n          placeholder={intl.formatMessage({ id: 'Terra.onsetPicker.year' })}\\n          selectAttrs={{\\n            'aria-labelledby': `${this.props.id}-year-select-label`,\\n          }}\\n          selectId={`${this.props.id}-year-select`}\\n        >\\n          {OnsetUtils.allowedYears(this.props.birthdate)\\n            .map(year => <SelectField.Option value={year.value} display={year.display} key={year.value} />)}\\n        </SelectField>\\n      );\\n    }\\n\\n    let dateSelect = null;\\n    if (this.state.granularity === GranularityOptions.DATE) {\\n      dateSelect = (\\n        <Field\\n          className={cx('field-inline')}\\n          isLabelHidden\\n          label={intl.formatMessage({ id: 'Terra.onsetPicker.dateLabel' })}\\n          labelAttrs={{\\n            id: `${this.props.id}-date-input-label`,\\n          }}\\n        >\\n          <DatePicker\\n            inputAttributes={{\\n              'aria-labelledby': `${this.props.id}-date-input-label`,\\n            }}\\n            onChange={this.changeDate}\\n            minDate={this.props.birthdate}\\n            maxDate={moment().format(DATE_FORMAT)}\\n            selectedDate={this.state.onsetDate ? this.state.onsetDate.format(DATE_FORMAT) : undefined}\\n            name={`${this.props.id}-date-input`}\\n          />\\n        </Field>\\n      );\\n    }\\n\\n    return (\\n      <div id={this.props.id} {...customProps}>\\n        <FieldSet className={cx('fieldset')} legend={legend} isLegendHidden={isLegendHidden}>\\n          {/* Precision */}\\n          <SelectField\\n            className={cx('field-inline', 'precision')}\\n            defaultValue={this.state.precision}\\n            label={intl.formatMessage({ id: 'Terra.onsetPicker.precisionLabel' })}\\n            labelAttrs={{\\n              id: `${this.props.id}-precision-select-label`,\\n            }}\\n            isLabelHidden\\n            onChange={this.changePrecision}\\n            placeholder={intl.formatMessage({ id: 'Terra.onsetPicker.precision' })}\\n            selectAttrs={{\\n              'aria-labelledby': `${this.props.id}-precision-select-label`,\\n            }}\\n            selectId={`${this.props.id}-precision-select`}\\n          >\\n            {OnsetUtils.allowedPrecisions(intl, this.props.precisionSet)\\n              .map(prec => <SelectField.Option value={prec.value} display={prec.display} key={prec.value} />)}\\n          </SelectField>\\n\\n          {granularitySelect}\\n\\n          {(this.state.precision !== PrecisionOptions.UNKNOWN) && (\\n            <div>\\n              {ageInput}\\n              {ageUnitSelect}\\n              {monthSelect}\\n              {yearSelect}\\n              {dateSelect}\\n            </div>\\n          )}\\n        </FieldSet>\\n      </div>\\n    );\\n  }\\n}\\n\\nOnsetPicker.propTypes = propTypes;\\nOnsetPicker.defaultProps = defaultProps;\\n\\nexport default injectIntl(OnsetPicker);\\nexport {\\n  AgeUnits,\\n  GranularityOptions,\\n  PrecisionOptions,\\n};\\n\"","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _terraClinicalOnsetPicker = _interopRequireDefault(require(\"terra-clinical-onset-picker\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar birthdate = (0, _moment.default)().subtract(6, 'years');\n\nvar picker = function picker() {\n  return _react.default.createElement(\"div\", null, _react.default.createElement(\"p\", null, \"Birthdate: \".concat(birthdate.format('MM-DD-YYYY'))), _react.default.createElement(_terraClinicalOnsetPicker.default, {\n    legend: \"Onset of symptoms\",\n    birthdate: birthdate.format('YYYY-MM-DD'),\n    id: \"doogs\"\n  }));\n};\n\nvar _default = picker;\nexports.default = _default;","export default \"import React from 'react';\\nimport moment from 'moment';\\nimport OnsetPicker from 'terra-clinical-onset-picker';\\n\\nconst birthdate = moment().subtract(6, 'years');\\nconst picker = () => (\\n  <div>\\n    <p>{`Birthdate: ${birthdate.format('MM-DD-YYYY')}`}</p>\\n    <OnsetPicker\\n      legend=\\\"Onset of symptoms\\\"\\n      birthdate={birthdate.format('YYYY-MM-DD')}\\n      id=\\\"doogs\\\"\\n    />\\n  </div>\\n);\\n\\nexport default picker;\\n\"","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _terraClinicalOnsetPicker = _interopRequireDefault(require(\"terra-clinical-onset-picker\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar HandledOnsetExample =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(HandledOnsetExample, _React$Component);\n\n  function HandledOnsetExample(props) {\n    var _this;\n\n    _classCallCheck(this, HandledOnsetExample);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HandledOnsetExample).call(this, props));\n    _this.state = {\n      precision: 'before',\n      granularity: 'year',\n      onsetDate: (0, _moment.default)().subtract(2, 'years').format('YYYY-MM-DD')\n    };\n    _this.handleOnset = _this.handleOnset.bind(_assertThisInitialized(_this));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(HandledOnsetExample, [{\n    key: \"handleOnset\",\n    value: function handleOnset(onsetObject) {\n      this.setState({\n        precision: onsetObject.precision,\n        granularity: onsetObject.granularity,\n        onsetDate: onsetObject.onsetDate,\n        ageUnit: onsetObject.ageUnit\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(e) {\n      e.preventDefault();\n      this.setState(function (prevState) {\n        return {\n          submittedData: {\n            precision: prevState.precision,\n            granularity: prevState.granularity,\n            onsetDate: prevState.onsetDate,\n            ageUnit: prevState.ageUnit\n          }\n        };\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var birthdate = (0, _moment.default)().subtract(6, 'years');\n      return _react.default.createElement(\"form\", {\n        onSubmit: this.handleSubmit\n      }, _react.default.createElement(\"p\", null, \"Birthdate: \".concat(birthdate.format('MM-DD-YYYY'))), _react.default.createElement(_terraClinicalOnsetPicker.default, {\n        birthdate: birthdate.format('YYYY-MM-DD'),\n        granularity: this.state.granularity,\n        id: \"doogs-supplied\",\n        precision: this.state.precision,\n        precisionSet: ['unknown', 'after', 'before', 'on/at'],\n        onsetDate: this.state.onsetDate,\n        legend: \"Date of Birth\",\n        onsetOnChange: this.handleOnset\n      }), _react.default.createElement(\"button\", {\n        type: \"submit\"\n      }, \"Submit\"), this.state.submittedData && _react.default.createElement(\"div\", null, _react.default.createElement(\"hr\", null), _react.default.createElement(\"p\", null, \"Form was submitted with\"), _react.default.createElement(\"p\", null, JSON.stringify(this.state.submittedData, null, 2))));\n    }\n  }]);\n\n  return HandledOnsetExample;\n}(_react.default.Component);\n\nvar _default = HandledOnsetExample;\nexports.default = _default;","export default \"import React from 'react';\\nimport moment from 'moment';\\nimport OnsetPicker from 'terra-clinical-onset-picker';\\n\\nclass HandledOnsetExample extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      precision: 'before',\\n      granularity: 'year',\\n      onsetDate: moment().subtract(2, 'years').format('YYYY-MM-DD'),\\n    };\\n\\n    this.handleOnset = this.handleOnset.bind(this);\\n    this.handleSubmit = this.handleSubmit.bind(this);\\n  }\\n\\n  handleOnset(onsetObject) {\\n    this.setState({\\n      precision: onsetObject.precision,\\n      granularity: onsetObject.granularity,\\n      onsetDate: onsetObject.onsetDate,\\n      ageUnit: onsetObject.ageUnit,\\n    });\\n  }\\n\\n  handleSubmit(e) {\\n    e.preventDefault();\\n\\n    this.setState(prevState => ({\\n      submittedData: {\\n        precision: prevState.precision,\\n        granularity: prevState.granularity,\\n        onsetDate: prevState.onsetDate,\\n        ageUnit: prevState.ageUnit,\\n      },\\n    }));\\n  }\\n\\n  render() {\\n    const birthdate = moment().subtract(6, 'years');\\n    return (\\n      <form onSubmit={this.handleSubmit}>\\n        <p>{`Birthdate: ${birthdate.format('MM-DD-YYYY')}`}</p>\\n        <OnsetPicker\\n          birthdate={birthdate.format('YYYY-MM-DD')}\\n          granularity={this.state.granularity}\\n          id=\\\"doogs-supplied\\\"\\n          precision={this.state.precision}\\n          precisionSet={[\\n            'unknown',\\n            'after',\\n            'before',\\n            'on/at',\\n          ]}\\n          onsetDate={this.state.onsetDate}\\n          legend=\\\"Date of Birth\\\"\\n          onsetOnChange={this.handleOnset}\\n        />\\n        <button type=\\\"submit\\\">Submit</button>\\n        {this.state.submittedData && (\\n          <div>\\n            <hr />\\n            <p>Form was submitted with</p>\\n            <p>{JSON.stringify(this.state.submittedData, null, 2)}</p>\\n          </div>\\n        )}\\n      </form>\\n    );\\n  }\\n}\\n\\nexport default HandledOnsetExample;\\n\"","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _terraClinicalOnsetPicker = _interopRequireDefault(require(\"terra-clinical-onset-picker\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar OnsetWithHiddenLegend = function OnsetWithHiddenLegend() {\n  return _react.default.createElement(_terraClinicalOnsetPicker.default, {\n    birthdate: (0, _moment.default)().subtract(6, 'years').format('YYYY-MM-DD'),\n    id: \"onsetlegend\",\n    legend: \"Date of Birth\",\n    isLegendHidden: true\n  });\n};\n\nvar _default = OnsetWithHiddenLegend;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _terraDocTemplate = _interopRequireDefault(require(\"terra-doc-template\"));\n\nvar _README = _interopRequireDefault(require(\"../../../../docs/README.md\"));\n\nvar _package = require(\"../../../../package.json\");\n\nvar _OnsetPicker = _interopRequireDefault(require(\"!raw-loader!../../../../src/OnsetPicker\"));\n\nvar _DefaultOnset = _interopRequireDefault(require(\"../example/DefaultOnset\"));\n\nvar _DefaultOnset2 = _interopRequireDefault(require(\"!raw-loader!../../../../src/terra-dev-site/doc/example/DefaultOnset\"));\n\nvar _HandledOnset = _interopRequireDefault(require(\"../example/HandledOnset\"));\n\nvar _HandledOnset2 = _interopRequireDefault(require(\"!raw-loader!../../../../src/terra-dev-site/doc/example/HandledOnset\"));\n\nvar _OnsetWithHiddenLegend = _interopRequireDefault(require(\"../example/OnsetWithHiddenLegend\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Component Source\n// Example Files\nvar DocPage = function DocPage() {\n  return _react.default.createElement(_terraDocTemplate.default, {\n    packageName: _package.name,\n    readme: _README.default,\n    srcPath: \"https://github.com/cerner/terra-clinical/tree/master/packages/\".concat(_package.name),\n    examples: [{\n      title: 'Default with initialization',\n      example: _react.default.createElement(_DefaultOnset.default, null),\n      source: _DefaultOnset2.default\n    }, {\n      title: 'Onset picker with supplied data and handlers',\n      example: _react.default.createElement(_HandledOnset.default, null),\n      source: _HandledOnset2.default\n    }, {\n      title: 'Onset picker with Hidden legend',\n      example: _react.default.createElement(_OnsetWithHiddenLegend.default, null),\n      source: _OnsetWithHiddenLegend.default\n    }],\n    propsTables: [{\n      componentName: 'Onset Picker',\n      componentSrc: _OnsetPicker.default\n    }]\n  });\n};\n\nvar _default = DocPage;\nexports.default = _default;"],"sourceRoot":""}