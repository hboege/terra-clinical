(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{1201:function(e,t){},1232:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s=i(n(0)),o=i(n(4)),l=i(n(20)),a=i(n(1239));function i(e){return e&&e.__esModule?e:{default:e}}function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(e[s]=n[s])}return e}).apply(this,arguments)}var c=o.default.bind(a.default),m=function(e){var t=r({},e),n=c(["IconAlert",e.className]);return s.default.createElement(l.default,r({className:n},t),s.default.createElement("path",{fill:"#E50000",d:"M1.2 45c-1.1 0-1.6-.8-1-1.7L23 3.7c.5-1 1.4-1 2 0l22.8 39.6c.5 1 .1 1.7-1 1.7H1.2z"}),s.default.createElement("path",{fill:"#FFF",d:"M21.5 36.7h5V42h-5v-5.3zm0-22.7h5v17.3h-5V14z"}))};m.displayName="IconAlert",m.defaultProps={viewBox:"0 0 48 48",xmlns:"http://www.w3.org/2000/svg"};var d=m;t.default=d},1239:function(e,t,n){e.exports={IconAlert:"IconAlert-module__IconAlert___A0JST"}},1246:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s=l(n(0)),o=l(n(20));function l(e){return e&&e.__esModule?e:{default:e}}function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(e[s]=n[s])}return e}).apply(this,arguments)}var i=function(e){var t=a({},e);return s.default.createElement(o.default,t,s.default.createElement("path",{d:"M24 0a11.3 11.3 0 11-11.3 11.3A11.35 11.35 0 0124 0zm19.5 48v-5.7a16.77 16.77 0 00-16.8-16.8h-5.5A16.75 16.75 0 004.5 42.3V48z"}))};i.displayName="IconPerson",i.defaultProps={viewBox:"0 0 48 48",xmlns:"http://www.w3.org/2000/svg","data-name":"Layer 1"};var r=i;t.default=r},1247:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s=i(n(0)),o=i(n(4)),l=i(n(20)),a=i(n(1256));function i(e){return e&&e.__esModule?e:{default:e}}function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(e[s]=n[s])}return e}).apply(this,arguments)}var c=o.default.bind(a.default),m=function(e){var t=r({},e),n=c(["IconInformation",e.className]);return s.default.createElement(l.default,r({className:n},t),s.default.createElement("path",{fill:"#007CC3",d:"M24 0c13.3 0 24 10.7 24 24S37.3 48 24 48 0 37.3 0 24C0 10.8 10.7 0 23.9 0h.1z"}),s.default.createElement("path",{fill:"#FFF",d:"M24.1 32.7c.7-1.8 6.3-11 2.4-13.5-2.2-1.4-5.2-.5-7.6 1.2l-.2 1.6c1.4-.5 2.8-.5 3.2.7 1 2.9-2.5 8-3.5 10.7-2.6 7.2 3.7 8.1 8.1 5.1l.2-1.7c-2.3.6-4-.3-2.6-4.1zM26.5 8c1.9 0 3.5 1.6 3.5 3.5S28.4 15 26.5 15 23 13.4 23 11.5 24.6 8 26.5 8z"}))};m.displayName="IconInformation",m.defaultProps={viewBox:"0 0 48 48",xmlns:"http://www.w3.org/2000/svg"};var d=m;t.default=d},1256:function(e,t,n){e.exports={IconInformation:"IconInformation-module__IconInformation___mwQQR"}},1368:function(e){e.exports=JSON.parse('{"name":"terra-clinical-item-collection","main":"lib/ItemCollection.js","version":"4.9.0","description":"Item Collection is a wrapper component designed to display data as either a table or list of items dependent on the relative container size.","repository":{"type":"git","url":"git+https://github.com/cerner/terra-clinical.git"},"keywords":["Cerner","Terra","terra-clinical-item-collection","ItemCollection","UI"],"author":"Cerner Corporation","license":"Apache-2.0","bugs":{"url":"https://github.com/cerner/terra-clinical/issues"},"homepage":"https://github.com/cerner/terra-clinical#readme","peerDependencies":{"react":"^16.8.5","react-dom":"^16.8.5"},"dependencies":{"classnames":"^2.2.5","keycode-js":"^1.0.4","prop-types":"^15.5.8","terra-clinical-item-view":"^3.9.0","terra-doc-template":"^2.0.0","terra-icon":"^3.0.0","terra-list":"^3.0.0","terra-responsive-element":"^4.0.0","terra-table":"^3.0.0"},"scripts":{"compile":"babel --root-mode upward src --out-dir lib --copy-files","lint":"npm run lint:js && npm run lint:scss","lint:js":"eslint --ext .js,.jsx . --ignore-path ../../.eslintignore","lint:scss":"stylelint src/**/*.scss","precompile":"rm -rf lib","test":"npm run jest && npm run wdio","jest":"jest --config ../../jestconfig.js","wdio":"cd ../.. && npx wdio ./packages/$npm_package_name/wdio.conf.js"}}')},1862:function(e,t,n){"use strict";n.r(t),t.default="# Terra Clinical Item Collection\n\nAn Item Collection is a wrapper component designed to display data as either a table or list of items dependent on the relative container size. Initially data is displayed in a tabular format that flexes the rendered component, but as the container is resized and the indicated breakpoint is hit, the display changes to shows the data as a list of items. The terra-table and terra-clinical-item react components will be utilized for displaying the data in these two ways.\n\nUltimately, the Item Collection component allows consumers to organize tabular data and ensure this data is readable as screen sizes become progressively smaller.\n\nThe ItemCollection is rendered as a static, non-selectable display, however it has the foundation to become a selectable component. See the [Selectable Implementation Guide](https://github.com/cerner/terra-clinical/blob/master/packages/terra-clinical-item-collection/docs/SelectableImplementation.md) for details.\n\n## Item Collection Item\n\nThis component handles the rendering of a list item or table row for the ItemCollection. By default, this renders an ListItem with an ItemView as the content. Else it will render a TableRow with the element layout of startAccessory, displays, comment, and endAccessory. This component does not handle missing element logic, but provides a clean way to represent an item as a child within the item collection.\n\nAdditionally, this component will export the ItemView.Display and ItemView.Comment components as Item.Display & Item.Comment.\n\n## Getting Started\n\n- Install with [npmjs](https://www.npmjs.com):\n  - `npm install terra-clinical-item-collection`\n  - `yarn add terra-clinical-item-collection`\n\n## Component Features\n* [Cross-Browser Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#cross-browser-support)\n* [Responsive Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#responsive-support)\n* [Mobile Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#mobile-support)\n"},1863:function(e,t,n){"use strict";n.r(t),t.default="import React from 'react';\nimport PropTypes from 'prop-types';\nimport ResponsiveElement from 'terra-responsive-element';\n\nimport Item from './Item';\nimport ListView from './_ListView';\nimport TableView from './_TableView';\nimport './ItemCollection.module.scss';\n\nconst maxDisplays = 8;\n\nconst Breakpoints = {\n  TINY: 'tiny',\n  SMALL: 'small',\n  MEDIUM: 'medium',\n  LARGE: 'large',\n  HUGE: 'huge',\n};\n\nconst propTypes = {\n  /**\n   * The breakpoint to switch from a table view to a list view.\n   * Breakpoint options are `tiny`, `small`, `medium`, `large`, or `huge`.\n   */\n  breakpoint: PropTypes.oneOf(Object.values(Breakpoints)),\n  /**\n   * The items that will flex between either a list item or a table row.\n   */\n  children: PropTypes.node.isRequired,\n  /**\n  * Whether or not the item collection's child items should display start accessories.\n  * If *false*, `startAccessory` prop of each child item is set to `null` before it is rendered.\n  */\n  hasStartAccessory: PropTypes.bool,\n  /**\n  * The number of displays the item collection should display.\n  * Array of child items is truncated to this length if there is more than one child.\n  */\n  numberOfDisplays: PropTypes.number,\n  /**\n  * Whether or not the item collection's child items should display comments.\n  * If *false*, `comment` prop of each child item is set to `null` before it is rendered.\n  */\n  hasComment: PropTypes.bool,\n  /**\n  * Whether or not the item collection's child items should display an end accessories.\n  * If *false*, `endAccessory` prop of each child item is set to `null` before it is rendered.\n  */\n  hasEndAccessory: PropTypes.bool,\n  /**\n   * The callback function that is assigned as to a child's onClick and onKeyDown callback if the child is selectable. The first\n   * parameter returned is the event and the second parameter is the child key. Function is not applied if child is not selectable.\n   */\n  onSelect: PropTypes.func,\n  /**\n   * Whether or not the list items should be divided.\n   */\n  isListDivided: PropTypes.bool,\n  /**\n   * Whether or not the table cells should be padded.\n   */\n  isTablePadded: PropTypes.bool,\n  /**\n   * Whether or not the table rows should be zebra striped.\n   */\n  isTableStriped: PropTypes.bool,\n};\n\nconst defaultProps = {\n  breakpoint: Breakpoints.SMALL,\n  hasStartAccessory: false,\n  numberOfDisplays: 0,\n  hasComment: false,\n  hasEndAccessory: false,\n  onSelect: undefined,\n  isListDivided: false,\n  isTablePadded: false,\n  isTableStriped: false,\n};\n\nconst ItemCollection = (props) => {\n  const {\n    children,\n    breakpoint,\n    onSelect,\n    hasStartAccessory,\n    numberOfDisplays,\n    hasComment,\n    hasEndAccessory,\n    isListDivided,\n    isTablePadded,\n    isTableStriped,\n    ...customProps\n  } = props;\n\n  const displaysRequired = (numberOfDisplays < maxDisplays) ? numberOfDisplays : maxDisplays;\n  const requiredElements = {\n    hasStartAccessory,\n    numberOfDisplays: displaysRequired,\n    hasComment,\n    hasEndAccessory,\n  };\n\n  const listDisplay = (\n    <ListView\n      requiredElements={requiredElements}\n      onSelect={onSelect}\n      isListDivided={isListDivided}\n    >\n      {children}\n    </ListView>\n  );\n\n  const tableDisplay = (\n    <TableView\n      requiredElements={requiredElements}\n      onSelect={onSelect}\n      isTablePadded={isTablePadded}\n      isTableStriped={isTableStriped}\n    >\n      {children}\n    </TableView>\n  );\n\n  const breakpointDisplay = {};\n  breakpointDisplay[breakpoint] = tableDisplay;\n\n  return (\n    <div {...customProps}>\n      <ResponsiveElement\n        responsiveTo=\"parent\"\n        defaultElement={listDisplay}\n        {...breakpointDisplay}\n      />\n    </div>\n  );\n};\n\nItemCollection.propTypes = propTypes;\nItemCollection.defaultProps = defaultProps;\n\n// Item Collection Building Blocks\nItemCollection.Item = Item;\nItemCollection.Comment = Item.Comment;\nItemCollection.Display = Item.Display;\n\nexport default ItemCollection;\nexport { Breakpoints };\n"},1864:function(e,t,n){"use strict";n.r(t),t.default="import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport ItemView from 'terra-clinical-item-view';\nimport List from 'terra-list';\nimport Table from 'terra-table';\nimport styles from './ItemCollection.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst ListItemLayouts = {\n  ONE_COLUMN: 'oneColumn',\n  TWO_COLUMNS: 'twoColumns',\n};\n\nconst ListItemTextEmphasisTypes = {\n  DEFAULT: 'default',\n  START: 'start',\n};\n\nconst AccessoryAlignments = {\n  ALIGN_TOP: 'alignTop',\n  ALIGN_CENTER: 'alignCenter',\n};\n\nconst Views = {\n  LIST: 'list',\n  TABLE: 'table',\n};\n\nconst propTypes = {\n  /**\n   * The display elements to be presented.\n   */\n  children: PropTypes.node,\n  /**\n   * The start accessory element to be presented.\n   * This will only be shown if the Item Collection component's `hasStartAccessory` prop is *true*.\n   */\n  startAccessory: PropTypes.node,\n  /**\n   * The comment element to be presented.\n   * This will only be shown if the Item Collection component's `hasComment` prop is *true*.\n   */\n  comment: PropTypes.node,\n  /**\n   * The end accessory element to be presented.\n   * This will only be shown if the Item Collection component's `hasEndAccessory` prop is *true*.\n   */\n  endAccessory: PropTypes.node,\n  /**\n   * When displayed as a list item, the column layout in which to present the displays.\n   * One of `'oneColumn'`, `'twoColumns'`.\n   */\n  listItemLayout: PropTypes.oneOf(Object.values(ListItemLayouts)),\n  /**\n   * When displayed as a list item, the text color emphasis when using the two columns layout.\n   * One of `'default'`, `'start'`.\n   */\n  listItemTextEmphasis: PropTypes.oneOf(Object.values(ListItemTextEmphasisTypes)),\n  /**\n   * When displayed as a list item, whether or not all text should truncate.\n   */\n  isListItemTruncated: PropTypes.bool,\n  /**\n   * The vertical alignment of the start and end accessories. One of `'alignTop'`,`'alignCenter'`.\n   */\n  accessoryAlignment: PropTypes.oneOf(Object.values(AccessoryAlignments)),\n  /**\n   * When displayed as a list item, indicates whether or not space is allocated for the start accessory.\n   * This will be set by the Item Collection component.\n   */\n  reserveStartAccessorySpace: PropTypes.bool,\n  /**\n   * When displayed as a list item, whether or not it has a chevron. This should only be used when creating a\n   * a single selectable list.\n   */\n  showListItemChevron: PropTypes.bool,\n  /**\n   * Whether or not the item is selectable. If true, the item is given list and table hover and focus styles\n   * and set tabIndex to 0.\n   */\n  isSelectable: PropTypes.bool,\n  /*\n   * Whether or not the item is selected.\n   */\n  isSelected: PropTypes.bool,\n  /**\n   * The view in which the item should be presented. Options are list or table and this will be set by the\n   * Item Collection component. One of `list`, `table`.\n   */\n  view: PropTypes.oneOf(Object.values(Views)),\n};\n\nconst defaultProps = {\n  startAccessory: undefined,\n  comment: undefined,\n  endAccessory: undefined,\n  accessoryAlignment: AccessoryAlignments.ALIGN_CENTER,\n  isListItemTruncated: false,\n  isSelectable: false,\n  isSelected: false,\n  listItemLayout: ListItemLayouts.ONE_COLUMN,\n  listItemTextEmphasis: ListItemTextEmphasisTypes.DEFAULT,\n  reserveStartAccessorySpace: false,\n  showListItemChevron: false,\n  view: Views.LIST,\n};\n\nfunction createListItem(elements, selectableProps, customProps, isSelected, itemViewStyles, showListItemChevron) {\n  const {\n    startAccessory, children, comment, endAccessory, reserveStartAccessorySpace,\n  } = elements;\n\n  const listItemContent = (\n    <ItemView\n      startAccessory={startAccessory}\n      displays={React.Children.toArray(children)}\n      comment={comment}\n      endAccessory={endAccessory}\n      reserveStartAccessorySpace={reserveStartAccessorySpace}\n      {...itemViewStyles}\n    />\n  );\n\n  return (\n    <List.Item\n      content={listItemContent}\n      isSelected={isSelected}\n      hasChevron={showListItemChevron}\n      {...selectableProps}\n      {...customProps}\n    />\n  );\n}\n\nfunction createTableCell(content, keyValue, contentType, accessoryAlignment) {\n  const cellClassNames = cx(\n    `content-${contentType}`,\n    { 'content-end-accessory': keyValue === 'end_accessory' },\n    { 'content-accessory-align-center': (contentType.includes('accessory') && accessoryAlignment === AccessoryAlignments.ALIGN_CENTER) },\n    { 'content-accessory-align-top': (contentType.includes('accessory') && accessoryAlignment === AccessoryAlignments.ALIGN_TOP) },\n  );\n\n  return (<Table.Cell content={content} key={keyValue} className={cellClassNames} />);\n}\n\nfunction createTableRow(elements, selectableProps, customProps, isSelected, accessoryAlignment) {\n  const {\n    startAccessory, children, comment, endAccessory,\n  } = elements;\n\n  const displayContent = React.Children.map(children, (display, index) => {\n    const displayKey = `display_${index + 1}`;\n    return createTableCell(display, displayKey, 'display');\n  });\n\n  return (\n    <Table.Row isSelected={isSelected} {...selectableProps} {...customProps}>\n      {startAccessory && createTableCell(startAccessory, 'start_accessory', 'accessory', accessoryAlignment)}\n      {displayContent}\n      {comment && createTableCell(comment, 'comment', 'comment')}\n      {endAccessory && createTableCell(endAccessory, 'end_accessory', 'accessory', accessoryAlignment)}\n    </Table.Row>\n  );\n}\n\nconst Item = (props) => {\n  const {\n    children,\n    startAccessory,\n    comment,\n    endAccessory,\n    accessoryAlignment,\n    isListItemTruncated,\n    isSelectable,\n    isSelected,\n    listItemLayout,\n    listItemTextEmphasis,\n    reserveStartAccessorySpace,\n    showListItemChevron,\n    view,\n    ...customProps\n  } = props;\n\n  const elements = {\n    children, startAccessory, comment, endAccessory, reserveStartAccessorySpace,\n  };\n  const selectableProps = isSelectable ? { isSelectable, tabIndex: 0 } : {};\n\n  if (view === Views.TABLE) {\n    return createTableRow(elements, selectableProps, customProps, isSelected, accessoryAlignment);\n  }\n\n  const itemViewStyles = {\n    layout: listItemLayout, textEmphasis: listItemTextEmphasis, isTruncated: isListItemTruncated, accessoryAlignment,\n  };\n  return createListItem(elements, selectableProps, customProps, isSelected, itemViewStyles, showListItemChevron);\n};\n\nItem.propTypes = propTypes;\nItem.defaultProps = defaultProps;\nItem.Display = ItemView.Display;\nItem.Comment = ItemView.Comment;\n\nexport default Item;\nexport {\n  ListItemLayouts, ListItemTextEmphasisTypes, AccessoryAlignments, Views,\n};\n"},1865:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s=c(n(0)),o=c(n(1866)),l=c(n(1246)),a=c(n(1232)),i=c(n(1247)),r=c(n(1257));function c(e){return e&&e.__esModule?e:{default:e}}var m=s.default.createElement(r.default.Display,{icon:s.default.createElement(l.default,null),text:"Asif Khan"}),d=s.default.createElement(r.default.Display,{text:"Care Position: Primary"}),p=s.default.createElement(r.default.Display,{text:"Room 100A"}),u=s.default.createElement(r.default.Display,{text:"Acuity: 5"}),y=s.default.createElement(r.default.Display,{text:"Start Time: 08-05-2016 12:00:00"}),h=s.default.createElement(r.default.Display,{text:"End Time: 08-05-2016 16:00:00"}),f=s.default.createElement(r.default.Comment,{text:"Faint red rash appeared at 08-05-2016 13:24:00"}),b=s.default.createElement(a.default,null),I=s.default.createElement(i.default,null),A=function(){return s.default.createElement(r.default,{hasStartAccessory:!0,numberOfDisplays:6,hasComment:!0,hasEndAccessory:!0,isListDivided:!0,isTableStriped:!0},s.default.createElement(r.default.Item,{startAccessory:b,comment:f,endAccessory:I},s.default.createElement(r.default.Display,{icon:s.default.createElement(l.default,null),text:"Asif Khan",textStyle:"attention"}),d,p,u,y,h),s.default.createElement(r.default.Item,{startAccessory:b,comment:f,endAccessory:I,listItemLayout:"twoColumns"},m,d,p,s.default.createElement(r.default.Display,{text:"Acuity: 5",icon:s.default.createElement(o.default,null)}),y,h),s.default.createElement(r.default.Item,{comment:f,endAccessory:I},m,d,p,u,y,h),s.default.createElement(r.default.Item,{comment:f,endAccessory:I},m,d,s.default.createElement(r.default.Display,{text:"Room 100A",textStyle:"strikeThrough"}),u,y),s.default.createElement(r.default.Item,{startAccessory:b,comment:f,listItemLayout:"twoColumns"},m,d,p,u,y,h))};t.default=A},1866:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s=l(n(0)),o=l(n(20));function l(e){return e&&e.__esModule?e:{default:e}}function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(e[s]=n[s])}return e}).apply(this,arguments)}var i=function(e){var t=a({},e);return s.default.createElement(o.default,t,s.default.createElement("path",{d:"M32 8v29a8 8 0 01-16 0V8a5 5 0 0110 0v29a2 2 0 01-4 0V15h-3v22a5 5 0 0010 0V8a8 8 0 00-16 0v29a11 11 0 0022 0V8z"}))};i.displayName="IconAttachment",i.defaultProps={className:"",viewBox:"0 0 48 48",xmlns:"http://www.w3.org/2000/svg","data-name":"Layer 1",isBidi:!0};var r=i;t.default=r},1879:function(e,t,n){"use strict";n.r(t),t.default='import React from \'react\';\n\nimport IconAttachment from \'terra-icon/lib/icon/IconAttachment\';\nimport IconPerson from \'terra-icon/lib/icon/IconPerson\';\nimport IconAlert from \'terra-icon/lib/icon/IconAlert\';\nimport IconInformation from \'terra-icon/lib/icon/IconInformation\';\nimport ItemCollection from \'terra-clinical-item-collection\';\n\nconst display1 = <ItemCollection.Display icon={<IconPerson />} text="Asif Khan" />;\nconst display2 = <ItemCollection.Display text="Care Position: Primary" />;\nconst display3 = <ItemCollection.Display text="Room 100A" />;\nconst display4 = <ItemCollection.Display text="Acuity: 5" />;\nconst display5 = <ItemCollection.Display text="Start Time: 08-05-2016 12:00:00" />;\nconst display6 = <ItemCollection.Display text="End Time: 08-05-2016 16:00:00" />;\nconst comment = <ItemCollection.Comment text="Faint red rash appeared at 08-05-2016 13:24:00" />;\n\nconst startAccessory = <IconAlert />;\nconst endAccessory = <IconInformation />;\n\nconst DefaultItemCollection = () => (\n  <ItemCollection\n    hasStartAccessory\n    numberOfDisplays={6}\n    hasComment\n    hasEndAccessory\n    isListDivided\n    isTableStriped\n  >\n    <ItemCollection.Item\n      startAccessory={startAccessory}\n      comment={comment}\n      endAccessory={endAccessory}\n    >\n      <ItemCollection.Display icon={<IconPerson />} text="Asif Khan" textStyle="attention" />\n      {display2}\n      {display3}\n      {display4}\n      {display5}\n      {display6}\n    </ItemCollection.Item>\n    <ItemCollection.Item\n      startAccessory={startAccessory}\n      comment={comment}\n      endAccessory={endAccessory}\n      listItemLayout="twoColumns"\n    >\n      {display1}\n      {display2}\n      {display3}\n      <ItemCollection.Display text="Acuity: 5" icon={<IconAttachment />} />\n      {display5}\n      {display6}\n    </ItemCollection.Item>\n    <ItemCollection.Item\n      comment={comment}\n      endAccessory={endAccessory}\n    >\n      {display1}\n      {display2}\n      {display3}\n      {display4}\n      {display5}\n      {display6}\n    </ItemCollection.Item>\n    <ItemCollection.Item\n      comment={comment}\n      endAccessory={endAccessory}\n    >\n      {display1}\n      {display2}\n      <ItemCollection.Display text="Room 100A" textStyle="strikeThrough" />\n      {display4}\n      {display5}\n    </ItemCollection.Item>\n    <ItemCollection.Item\n      startAccessory={startAccessory}\n      comment={comment}\n      listItemLayout="twoColumns"\n    >\n      {display1}\n      {display2}\n      {display3}\n      {display4}\n      {display5}\n      {display6}\n    </ItemCollection.Item>\n  </ItemCollection>\n);\n\nexport default DefaultItemCollection;\n'},1975:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s=d(n(0)),o=d(n(1200)),l=d(n(1862)),a=n(1368),i=d(n(1863)),r=d(n(1864)),c=d(n(1865)),m=d(n(1879));function d(e){return e&&e.__esModule?e:{default:e}}var p=function(){return s.default.createElement(o.default,{packageName:a.name,readme:l.default,srcPath:"https://github.com/cerner/terra-clinical/tree/master/packages/".concat(a.name),examples:[{title:"Divided Detail View",example:s.default.createElement(c.default,null),source:m.default}],propsTables:[{componentName:"Item Collection",componentSrc:i.default},{componentName:"Item",componentSrc:r.default}]})};t.default=p}}]);
//# sourceMappingURL=56-45c2e186b248b1b8dfc7.js.map